exercise.txt

./lab_a 0
Number 0.000000 => Bin sign:0 Dec exponent:-127  Hex significand .0
./lab_a 1
Number 1.000000 => Bin sign:0 Dec exponent:0  Hex significand .0
./lab_a -1
Number -1.000000 => Bin sign:1 Dec exponent:0  Hex significand .0
./lab_a 1.5
Number 1.500000 => Bin sign:0 Dec exponent:0  Hex significand .800000
./lab_a 1.25
Number 1.250000 => Bin sign:0 Dec exponent:0  Hex significand .400000
./lab_a 1.125
Number 1.125000 => Bin sign:0 Dec exponent:0  Hex significand .200000


./lab_b
         1	1.50000000000000000000
       0.5	1.25000000000000000000
      0.25	1.12500000000000000000
     0.125	1.06250000000000000000
    0.0625	1.03125000000000000000
   0.03125	1.01562500000000000000
  0.015625	1.00781250000000000000
 0.0078125	1.00390625000000000000
0.00390625	1.00195312500000000000
0.001953125	1.00097656250000000000
0.0009765625	1.00048828125000000000
0.00048828125	1.00024414062500000000
0.00024414062	1.00012207031250000000
0.00012207031	1.00006103515625000000
6.1035156e-05	1.00003051757812500000
3.0517578e-05	1.00001525878906250000
1.5258789e-05	1.00000762939453125000
7.6293945e-06	1.00000381469726562500
3.8146973e-06	1.00000190734863281250
1.9073486e-06	1.00000095367431640625
9.5367432e-07	1.00000047683715820312
4.7683716e-07	1.00000023841857910156
2.3841858e-07	1.00000011920928955078
Calculated Machine Epsilon: 1.19209e-07
Actual Machine Epsilon:     1.19209e-07
         1	1.50000000000000000000
       0.5	1.25000000000000000000
      0.25	1.12500000000000000000
     0.125	1.06250000000000000000
    0.0625	1.03125000000000000000
   0.03125	1.01562500000000000000
  0.015625	1.00781250000000000000
 0.0078125	1.00390625000000000000
0.00390625	1.00195312500000000000
0.001953125	1.00097656250000000000
0.0009765625	1.00048828125000000000
0.00048828125	1.00024414062500000000
0.00024414062	1.00012207031250000000
0.00012207031	1.00006103515625000000
6.1035156e-05	1.00003051757812500000
3.0517578e-05	1.00001525878906250000
1.5258789e-05	1.00000762939453125000
7.6293945e-06	1.00000381469726562500
3.8146973e-06	1.00000190734863281250
1.9073486e-06	1.00000095367431640625
9.5367432e-07	1.00000047683715820312
4.7683716e-07	1.00000023841857910156
2.3841858e-07	1.00000011920928955078
1.1920929e-07	1.00000005960464477539
5.9604645e-08	1.00000002980232238770
2.9802322e-08	1.00000001490116119385
1.4901161e-08	1.00000000745058059692
7.4505806e-09	1.00000000372529029846
3.7252903e-09	1.00000000186264514923
1.8626451e-09	1.00000000093132257462
9.3132257e-10	1.00000000046566128731
4.6566129e-10	1.00000000023283064365
2.3283064e-10	1.00000000011641532183
1.1641532e-10	1.00000000005820766091
5.8207661e-11	1.00000000002910383046
2.910383e-11	1.00000000001455191523
1.4551915e-11	1.00000000000727595761
7.2759576e-12	1.00000000000363797881
3.6379788e-12	1.00000000000181898940
1.8189894e-12	1.00000000000090949470
9.094947e-13	1.00000000000045474735
4.5474735e-13	1.00000000000022737368
2.2737368e-13	1.00000000000011368684
1.1368684e-13	1.00000000000005684342
5.6843419e-14	1.00000000000002842171
2.8421709e-14	1.00000000000001421085
1.4210855e-14	1.00000000000000710543
7.1054274e-15	1.00000000000000355271
3.5527137e-15	1.00000000000000177636
1.7763568e-15	1.00000000000000088818
8.8817842e-16	1.00000000000000044409
4.4408921e-16	1.00000000000000022204
Calculated Machine Epsilon (double precision): 2.22045e-16
Actual Machine Epsilon (double precison):      2.22045e-16


./lab_c (with -O1) 
Adding 1.000000+2.000000i and 3.000000+4.000000i
   Result(addSSS) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
   Result(addSPI) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
   Result(addPPP) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
Are these results right? length is 25 bytes
   Result(addSSP) is:0.000000+0.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
Are these results right? length is 25 bytes
   Result(addSSP) is:0.000000+0.000000i

addSSP does not provide correct answers for all conditions because of how the
stack is used, the stack can be modified without the code making a function
call especially when executing threads. It also fails when a function is called
with variable number of arguments so we don't know how much of the stack will be
modified. This is where gcc issued a warning: function returns address of local variable.

./lab_c_0 (with -O0)
Adding 1.000000+2.000000i and 3.000000+4.000000i
   Result(addSSS) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
   Result(addSPI) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
   Result(addPPP) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
Are these results right? length is 25 bytes
   Result(addSSP) is:4.000000+6.000000i

Adding 1.000000+2.000000i and 3.000000+4.000000i
Are these results right? length is 25 bytes
   Result(addSSP) is:0.000000+0.000000i

The result of addSSP here with -O0 optimization is different now which verifies how
this method will not provide correct answers for all conditions. The rest of the 
function results were the same for -O0 and -O1. 
